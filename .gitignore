.DS_Store
website/build
website/transpiled-babel/
website/common/transpiled-babel/
node_modules
content_cache
i18n_cache
apidoc/html
*.swp
.idea*
config.json
npm-debug.log*
lib
newrelic_agent.log
.bower-tmp
.bower-registry
.bower-cache
.vagrant
Vagrantfile
TODO
*.log
src/*/*.map
src/*/*/*.map
*.sublime-workspace
coverage
coverage.html
common/dist/scripts/*
dist
dist-client
website/client/dist
test/client/unit/coverage
test/client/e2e/reports
test/client-old/spec/mocks/translations.js
yarn.lock
.gitattributes

# Elastic Beanstalk Files
.elasticbeanstalk/*
!.elasticbeanstalk/*.cfg.yml
!.elasticbeanstalk/*.global.yml

/.vscode

# webstorm fake webpack for path intellisense
webpack.webstorm.config

# mongodb replica set for local dev
mongodb-*.tgz
/mongodb-data
mongodb-macos-x86_64-4.2.8/

# Exclude all .tfvars files, which are likely to contain sentitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
#
# *.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files for terraform
.terraformrc
terraform.rc
terraform-gcp/.terraform.lock.hcl

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*
